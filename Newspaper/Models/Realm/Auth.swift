/* DO NOT EDIT | Generated by gyro */

import RealmSwift
import Foundation

final class Auth: Object, Codable {
  private enum Keys: String, CodingKey {
    case exp = "exp"
    case message = "message"
    case status = "status"
    case token = "token"

    }

  @objc dynamic var exp: String?
  @objc dynamic var message: String?
  let status = RealmOptional<Bool>()
  @objc dynamic var token: String?




  convenience required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: Keys.self)
    let exp = try? container.decode(String?.self, forKey: .exp)
    let message = try? container.decode(String?.self, forKey: .message)
    let status = try? container.decode(Bool?.self, forKey: .status)
    let token = try? container.decode(String?.self, forKey: .token)
    self.init(exp: exp, message: message, status: status, token: token)
  }

  convenience init(exp: String?, message: String?, status: Bool?, token: String?) {
    self.init()
    self.exp = exp
    self.message = message
    self.status.value = status
    self.token = token

  }
}
